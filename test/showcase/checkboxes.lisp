(in-package :xul-test)

(define-component checkboxes-showcase ()
  ((tab-state :initform "(no input yet)"
	      :accessor tab-state)
   (access-state :initform "(no input yet)"
	      :accessor access-state)
   (state-state :initform "(no input yet)"
		:accessor state-state))
  (:render (comp)
	   (<:vbox (<:flex= 1)
		   (<:style= "overflow: auto")
		   (<:description "XUL Checkboxes")
		   (<:hbox
		     (render-checkboxes-tab comp)
		     (render-checkboxes-access comp)
		     (render-checkboxes-state comp))
		   (<:hbox
		     (render-checkboxes-orientation comp)
		     (render-checkboxes-images comp)))))

(defun render-checkboxes-tab (comp)
  (<:group-box
    (<:flex= 1)
    (<:caption (<:label= "tabbing"))
    (<:vbox
      (<:description "These tab oddly")
      (flet ((tab-checkbox (number)
	       (<:checkbox (<:flex= 1)
			   (when (equalp (tab-state comp)
					 number)
			     (<:checked= t))
			   (<:tabindex= number)
			   (<:label= number)
			   (on-command=* (setf (tab-state comp) number)))))
	(mapcar #'tab-checkbox (list 1 2 3 4 5 6)))
      (<:hbox (<:pack= :center)
	      (princ-to-string (tab-state comp))))))

(defun render-checkboxes-access (comp)
  (<:group-box
    (<:flex= 1)
    (<:caption (<:label= "accesskeys"))
    (<:vbox
      (<:description "These have access keys")
      (flet ((access-checkbox (label access-key)
	       (<:checkbox (<:flex= 1)
			   (when (equalp (access-state comp)
					 label)
			     (<:checked= t))
			   (<:label= label)
			   (<:accesskey= access-key)
			   (on-command=* (setf (access-state comp) label)))))
	(mapcar (lambda (args)
		  (apply #'access-checkbox args))
		'(("Animal" "A")
		  ("Bear" "B")
		  ("Cat" "C")
		  ("Dog" "D")
		  ("Deer" "E")
		  ("Fish" "F"))))
      (<:hbox (<:pack= :center)
	      (princ-to-string (access-state comp))))))

(defun render-checkboxes-state (comp)
  (<:group-box
    (<:caption (<:label= "These show states"))
    (<:hbox 
      (<:checkbox (<:flex= 1)
		  (<:label= "Default")
		  (<:default= t)
		  (when (equalp (state-state comp) "Default")
		    (<:checked= t))
		  (on-command=* (setf (state-state comp) "Default")))
      (<:checkbox (<:flex= 1)
		  (<:label= "Checked")
		  (<:checked= t)
		  (on-command=* (setf (state-state comp) "Checked")))
      (<:checkbox (<:flex= 1)
		  (<:label= "Normal")
		  (when (equalp (state-state comp) "Normal")
		    (<:checked= t))
		  (on-command=* (setf (state-state comp) "Normal")))
      (<:checkbox (<:flex= 1)
		  (<:label= "Disabled")
		  (when (equalp (state-state comp) "Disabled")
		    (<:checked= t))
		  (<:disabled= t)
		  (on-command=* (setf (state-state comp) "Disabled"))))
    (<:hbox (<:pack= :center)
	    (<:description (princ-to-string (state-state comp))))))

(defun render-checkboxes-orientation (comp))
(defun render-checkboxes-images (comp))
